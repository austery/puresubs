/**
 * 🎯 PureSubs 类型定义
 * 
 * 为了提升代码质量和类型安全，我们定义了详细的TypeScript接口
 * 来替换项目中的 any 类型使用
 */

// =============================================================================
// YouTube Player Response 相关类型
// =============================================================================

/**
 * 单个字幕轨道的数据结构
 */
export interface CaptionTrack {
  baseUrl: string;
  name: {
    simpleText: string;
  };
  vssId: string;
  languageCode: string;
  kind?: string; // 可选属性，自动生成的字幕才有
  isTranslatable: boolean;
}

/**
 * 播放器字幕轨道列表渲染器
 */
export interface PlayerCaptionsTracklistRenderer {
  captionTracks: CaptionTrack[];
  audioTracks?: unknown[]; // YouTube 内部结构，我们不关心具体类型
  translationLanguages?: unknown[]; // YouTube 内部结构，我们不关心具体类型
}

/**
 * YouTube 初始播放器响应结构（我们关心的部分）
 */
export interface YtInitialPlayerResponse {
  captions?: {
    playerCaptionsTracklistRenderer: PlayerCaptionsTracklistRenderer;
  };
  videoDetails?: {
    videoId: string;
    title: string;
    lengthSeconds: string;
    keywords?: string[];
    channelId: string;
    isLive?: boolean;
  };
  playabilityStatus?: {
    status: string;
    reason?: string;
  };
}

// =============================================================================
// 内容脚本全局对象类型
// =============================================================================

/**
 * 挂载到 window 对象的 PureSubs 内容脚本接口
 */
export interface PureSubsContentScript {
  getCachedSubtitleData: (videoId: string, language?: string) => SpyData | null;
  clearCache: () => void;
  getVersion: () => string;
}

/**
 * 扩展的 Window 接口，包含 PureSubs 相关属性
 */
export interface ExtendedWindow extends Window {
  puresubsContentScript: PureSubsContentScript;
  ytInitialPlayerResponse?: YtInitialPlayerResponse;
  ytInitialData?: Record<string, unknown>; // YouTube 内部数据，结构极其复杂
}

// =============================================================================
// 消息传递类型
// =============================================================================

/**
 * PostMessage 事件数据类型
 */
export interface PostMessageEventData {
  type: string;
  data?: Record<string, unknown> | SpyData;
  timestamp?: number;
}

/**
 * PostMessage 事件类型
 */
export interface PostMessageEvent extends MessageEvent {
  data: PostMessageEventData;
}

// =============================================================================
// 字幕数据类型
// =============================================================================

/**
 * 字幕条目
 */
export interface SubtitleEntry {
  start: number;
  end: number;
  text: string;
  dur?: number;
}

/**
 * 间谍拦截的字幕数据
 */
export interface SpyData {
  url: string;
  content: string;
  videoId: string;
  language: string;
  format: string;
  timestamp: number;
}

/**
 * 等待中的Promise请求
 */
export interface PendingRequest {
  resolve: (data: SpyData) => void;
  reject: (error: Error) => void;
  videoId: string;
  language: string;
  timestamp: number;
}

// =============================================================================
// 用户偏好设置类型
// =============================================================================

/**
 * 用户偏好设置
 */
export interface UserPreferences {
  preferredLanguage: string;
  autoDownload: boolean;
  format: 'srt' | 'txt' | 'vtt';
  includeTimestamps: boolean;
}

// =============================================================================
// 智能下载结果类型
// =============================================================================

/**
 * 智能字幕下载结果
 */
export interface SmartDownloadResult {
  success: boolean;
  content?: string;
  title?: string;
  description?: string;
  actualLanguage?: string;
  isAutoGenerated?: boolean;
  error?: string;
}

// =============================================================================
// DOM 相关类型
// =============================================================================

/**
 * 按钮状态类型
 */
export type ButtonState = 'disabled' | 'ready' | 'loading' | 'success' | 'error';

/**
 * 通知类型
 */
export type NotificationType = 'success' | 'error' | 'info' | 'warning';
