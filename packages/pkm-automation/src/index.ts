import express, { Request, Response } from 'express';
import { getYouTubeData, ExtractOptions } from '@puresubs/core-engine';

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware to parse JSON request bodies
app.use(express.json());

// Interface for request body
interface SubtitleRequest {
  videoUrl: string;
  options?: ExtractOptions;
}

// POST endpoint for subtitle extraction
app.post('/api/v1/subtitle', async (req: Request, res: Response) => {
  try {
    const { videoUrl, options = {} }: SubtitleRequest = req.body;
    
    // Input validation
    if (!videoUrl || typeof videoUrl !== 'string' || videoUrl.trim() === '') {
      return res.status(400).json({
        error: 'videoUrl is required'
      });
    }
    
    // Set default options to extract subtitles
    const extractOptions: ExtractOptions = {
      extractSubtitles: true,
      preferredLanguages: ['zh-Hans', 'zh-CN', 'zh', 'en'],
      includeAutoGenerated: true,
      ...options
    };
    
    // Call core-engine to extract YouTube data with subtitles
    const result = await getYouTubeData(videoUrl, extractOptions);
    
    // Return successful response
    return res.status(200).json({
      success: true,
      data: result
    });
    
  } catch (error) {
    console.error('Error extracting subtitle:', error);
    
    return res.status(500).json({
      error: 'Failed to extract subtitle.'
    });
  }
});

// Health check endpoint
app.get('/api/v1/health', (req: Request, res: Response) => {
  res.status(200).json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    service: 'pkm-automation'
  });
});

// Start the server
app.listen(PORT, () => {
  console.log(`ðŸš€ PKM Automation API server is running on port ${PORT}`);
  console.log(`ðŸ“‹ Health check: http://localhost:${PORT}/api/v1/health`);
  console.log(`ðŸŽ¬ Subtitle extraction: POST http://localhost:${PORT}/api/v1/subtitle`);
});

export default app;